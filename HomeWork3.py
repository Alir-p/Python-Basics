# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.

# def division(var_1, var_2):
#     try:
#         return var_1 / var_2
#     except ZeroDivisionError:
#         return 'Делить на ноль нельзя'
#
#
# a = int(input('Введите первое число: '))
# b = int(input('Введите второе число: '))
#
# print(division(a, b))


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год
# рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить
# вывод данных о пользователе одной строкой.
#
# def data_user(surname, name, phone, city, email, year_of_birth):
#     print(f'{name} {surname} {city} {email} {phone} {year_of_birth}')
#
#
# param = ['name', 'surname', 'year_of_birth', 'city', 'email', 'phone']
# base = {}
#
# for d in param:
#     item = input(f'Enter {d}: ')
#     base.update({d: item})
#
# data_user(**base)


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших
# двух аргументов.

# def my_func(x, y, z):
#     if x > y:
#         if y > z:
#             return x + y
#         else:
#             return x + z
#     elif x > z:
#         return x + y
#     else:
#         return y + z
#
#
# a, b, c = map(int, input('Введите три числа через пробел: ').split())
# print(my_func(a, b, c))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение
# числа x в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без
# встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
# более сложная реализация без оператора **, предусматривающая использование цикла.

# def my_func1(x, y):
#     return x ** y
#
#
# def my_func2(x, y):
#     res = x
#     for i in range(2, abs(y) + 1):
#         res *= x
#     return 1 / res if y < 0 else res
#
#
# a = 2
# b = -3
#
# print(my_func1(a, b))
# print(my_func2(a, b))


# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма
# чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых
# чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение
# программы завершается. Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих
# чисел к полученной ранее сумме и после этого завершить программу.

# def summa():
#     res = 0
#     while True:
#         li = input(': ').split()
#         for i in li:
#             try:
#                 x = int(i)
#             except ValueError:
#                 return res
#             res += x
#
#
# print('Введите числа разделенные пробелом. Для выхода введите любую букву.')
# print(summa())


# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной
# первой буквой. Например, print(int_func(‘text’)) -> Text.

# def int_func(st):
#     n_st = []
#     first = 0
#     for ch in st:
#         if first == 0:
#             n_st.append(ch.upper())
#             first = 1
#         else:
#             n_st.append(ch.lower())
#     return ''.join(n_st)
#
#
# word = 'hello'
# print(int_func(word))

# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. Каждое слово
# состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться с
# заглавной буквы. Используйте написанную ранее функцию int_func().

# string = 'when you gaze long into an abyss the abyss also gazes into you'
# n_string = []
# for i in string.split():
#     n_string.append(int_func(i))
# print(' '.join(n_string))
